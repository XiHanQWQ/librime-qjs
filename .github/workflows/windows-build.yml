name: Windows build
on:
  workflow_call:
    inputs:
      repository:
        default: HuangJian/librime
        required: false
        type: string
      ref:
        default: master
        required: false
        type: string
      rime_plugins:
        default: ${{ github.repository }}@${{ github.ref_name }}
        required: false
        type: string
      build_type:
        default: Nightly
        required: false
        type: string

jobs:
  build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        compiler: [clang]
        arch: [x64]
        include:
          - { compiler: clang, cc: clang, cxx: clang++ }
    env:
      boost_version: 1.84.0
      BOOST_ROOT: ${{ github.workspace }}\deps\boost-1.84.0
      RIME_PLUGINS: ${{ inputs.rime_plugins }}

    steps:
      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v3
      #   with:
      #     limit-access-to-actor: true
      #     timeout-minutes: 360
      #     detached: true

      - name: Checkout last commit
        uses: actions/checkout@v5
        with:
          # Repository to check out (format: owner/repo)
          repository: ${{ inputs.repository }}   # optional, defaults to current repository
          # The branch, tag or SHA to checkout
          ref: ${{ inputs.ref }}                 # optional, defaults to the master branch
          submodules: recursive
      - name: Create env.bat
        run: |
          $envfile = ".\env.bat"
          $envcontent = @"
            set RIME_ROOT=%CD%
            set CXX=${{ matrix.cxx }}
            set CC=${{ matrix.cc }}
            set CMAKE_GENERATOR=Ninja
          "@
          Set-Content -Path $envfile -Value $envcontent
          cat $envfile

      - name: Configure MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.cross_arch || matrix.arch }}

      - name: Configure Ninja
        run: pip install ninja

      - name: Configure clang
        run: choco upgrade -y llvm

      - name: Configure build environment
        run: |
          $git_ref_name = git describe --always
          echo "git_ref_name=$git_ref_name" >> $env:GITHUB_ENV
          git submodule > submodule-status

      - name: Install boost
        run: .\install-boost.bat

      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            bin
            include
            lib
            share
          key: ${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.arch }}-${{ hashFiles('submodule-status') }}

      - name: Build dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: .\build.bat deps

      - name: Install Rime plugins
        run: .\action-install-plugins-windows.bat

      - name: Get librime-qjs commit hash
        run: |
          cd .\plugins\qjs
          $qjs_git_ref_name = git describe --always
          echo "qjs_git_ref_name=$qjs_git_ref_name" >> $env:GITHUB_ENV

      - name: Build and test
        run: |
          .\build.bat
          .\build.bat test
          cp .\dist\lib\rime.dll .\plugins\qjs\build\rime.dll
          .\plugins\qjs\build\librime-qjs-tests.exe

      - name: Create distributable
        run: |
          mkdir assets
          xcopy /Y /I .\version-info.txt .\assets\
          xcopy /Y /I /E .\dist\lib\rime.dll .\assets\
          xcopy /Y /I /E .\plugins\qjs\build\qjs.exe .\assets\
          cd .\plugins\qjs
          .\tools\update-version.bat ${{ inputs.build_type}}
          cd ..\..
          xcopy /Y /I .\plugins\qjs\contrib\rime.d.ts .\assets\
          7z a librime-qjs-${{ env.qjs_git_ref_name }}-${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.arch }}.7z .\assets\*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.arch }}
          path: |
            librime-qjs-${{ env.qjs_git_ref_name }}-${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.arch }}.7z
